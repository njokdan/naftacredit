part of popup_dialog.dart;

class PopupDialog extends _$PopupDialog {
  PopupDialog.success({
    String? title,
    Widget? titleWidget,
    String? message,
    Widget? messageWidget,
    Duration? duration,
    bool? autoDismiss,
    TextStyle? titleStyle,
    TextStyle? messageStyle,
    void Function(dynamic)? onTap,
    PopupDialogStyle? alertStyle,
    PopupDialogPosition? position,
    void Function(dynamic)? callbackOnShow,
    void Function(dynamic)? callback,
    void Function(PopupDialogStatus?)? listener,
  }) : super(
          type: _PopupDialogType.flushbar,
          title: title,
          titleWidget: titleWidget,
          message: message,
          messageWidget: messageWidget,
          popupIcon: const Icon(
            Icons.check_circle,
            color: Palette.successGreen,
          ),
          duration: duration,
          isDismissible: true,
          autoDismiss: autoDismiss,
          blockBackgroundTouch: true,
          titleStyle: titleStyle,
          messageStyle: messageStyle,
          shouldIconPulse: false,
          onTap: onTap,
          overlayColor: Theme.of(App.context).scaffoldBackgroundColor,
          overlayOpacity: 0.4,
          alertStyle: alertStyle,
          position: position,
          flushbarListener: listener,
          dismissDirection: PopupDialogDismissDirection.vertical,
          leftBarIndicatorColor: Palette.successGreen,
          callbackOnShow: callbackOnShow,
          callback: callback,
        );

  PopupDialog.info({
    String? title,
    String? message,
    Duration? duration,
    TextStyle? titleStyle,
    TextStyle? messageStyle,
    PopupDialogPosition? position,
    void Function(dynamic)? callbackOnShow,
    void Function(dynamic)? callback,
    void Function(PopupDialogStatus?)? listener,
  }) : super(
          type: _PopupDialogType.flushbar,
          title: title,
          message: message,
          popupIcon: const Icon(Icons.info, color: Palette.infoBlue),
          duration: duration,
          isDismissible: true,
          autoDismiss: true,
          blockBackgroundTouch: false,
          titleStyle: titleStyle,
          messageStyle: messageStyle,
          shouldIconPulse: false,
          position: position,
          flushbarListener: listener,
          dismissDirection: PopupDialogDismissDirection.vertical,
          leftBarIndicatorColor: Palette.infoBlue,
          callbackOnShow: callbackOnShow,
          callback: callback,
        );

  const PopupDialog.error({
    String? title,
    Widget? titleWidget,
    String? message,
    Widget? messageWidget,
    Duration? duration,
    bool? isDismissible,
    bool? autoDismiss,
    TextStyle? titleStyle,
    TextStyle? messageStyle,
    void Function(dynamic)? onTap,
    PopupDialogStyle? alertStyle,
    PopupDialogPosition? position,
    PopupDialogDismissDirection? dismissDirection,
    void Function(dynamic)? callbackOnShow,
    void Function(dynamic)? callback,
    void Function(PopupDialogStatus?)? listener,
  }) : super(
          type: _PopupDialogType.flushbar,
          title: title,
          titleWidget: titleWidget,
          message: message,
          messageWidget: messageWidget,
          popupIcon: const Icon(Icons.error, color: Palette.errorRed),
          duration: duration,
          isDismissible: isDismissible,
          autoDismiss: autoDismiss,
          blockBackgroundTouch: false,
          titleStyle: titleStyle,
          messageStyle: messageStyle,
          shouldIconPulse: true,
          onTap: onTap,
          alertStyle: alertStyle,
          position: position,
          flushbarListener: listener,
          dismissDirection: dismissDirection,
          leftBarIndicatorColor: Palette.errorRed,
          callbackOnShow: callbackOnShow,
          callback: callback,
        );
}
